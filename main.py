from fastapi import FastAPI, Request, HTTPException
import json
import os

# Cria a inst√¢ncia do FastAPI
app = FastAPI(
    title="Servidor de Webhook para WhatsApp",
    description="Recebe e exibe notifica√ß√µes da Evolution API em tempo real.",
    version="1.0.0"
)

# Este √© o nosso endpoint que vai receber as notifica√ß√µes via POST
# Usamos 'summary' e 'description' para uma auto-documenta√ß√£o elegante
@app.post(
    "/", 
    summary="Receptor de Webhooks",
    description="Recebe notifica√ß√µes POST da Evolution API e as exibe no log."
)
async def webhook_receiver(request: Request):
    """
    Recebe um webhook, imprime seu conte√∫do e retorna uma confirma√ß√£o.
    """
    print("-------------------------------------------")
    print("üéâ Webhook Recebido! üéâ")
    
    try:
        # Pega os dados JSON que a Evolution API enviou
        data = await request.json()
        
        # Imprime os dados formatados para f√°cil leitura
        print(json.dumps(data, indent=2))
        
        # Responde para a Evolution API que recebemos com sucesso
        return {"status": "sucesso", "message": "Webhook recebido corretamente."}

    except json.JSONDecodeError:
        print("üö® Erro: N√£o foi poss√≠vel decodificar o corpo da requisi√ß√£o como JSON.")
        raise HTTPException(status_code=400, detail="Corpo da requisi√ß√£o inv√°lido. Esperava-se um JSON.")

# Rota de health check para saber se o servidor est√° no ar
@app.get(
    "/health",
    summary="Verifica√ß√£o de Sa√∫de",
    description="Um endpoint simples para verificar se o servidor est√° online."
)
def health_check():
    return {"status": "ok"}

# O c√≥digo abaixo √© √∫til para testes locais, mas o Railway usar√° o Procfile
if __name__ == '__main__':
    import uvicorn
    port = int(os.environ.get('PORT', 5000))
    uvicorn.run(app, host='0.0.0.0', port=port)